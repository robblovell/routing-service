// Generated by CoffeeScript 1.10.0
(function() {
  var Neo4jRepository, Resource, config, mongoose, repo, repoConfig;

  mongoose = require('mongoose');

  Resource = require('resourcejs');

  Neo4jRepository = require('../source/repositories/Neo4jRepository');

  config = require('../config/configuration');

  repoConfig = {
    url: config.neo4jurl
  };

  repo = new Neo4jRepository(repoConfig);

  module.exports = function(app, model) {
    var resource;
    resource = Resource(app, '/nodetypes/:nodesType', 'nodes', model).get({
      before: function(req, res, next) {
        var example;
        example = {
          id: req.params.nodesId,
          type: req.params.nodesType
        };
        console.log(JSON.stringify(example, null, 3));
        repo.get(example, function(error, result) {
          if ((error != null)) {
            res.send({
              error: Error.message
            });
            return;
          }
          res.send(JSON.stringify(result));
        });
      }
    }).put({
      before: function(req, res, next) {
        req.body.id = req.params.nodesId;
        req.body.type = req.params.nodesType;
        repo.set(req.body.id, req.body, function(error, result) {
          if ((error != null)) {
            if (error.fields != null) {
              res.send({
                error: error.fields[0].message,
                code: error.fields[0].code
              });
            } else {
              res.send({
                error: "error in post: " + JSON.stringify(error)
              });
            }
            return;
          }
          res.send(JSON.stringify(result));
        });
      }
    }).post({
      before: function(req, res, next) {
        req.body.type = req.params.nodesType;
        repo.set(req.body.id, req.body, function(error, result) {
          if ((error != null)) {
            if (error.fields != null) {
              res.send({
                error: error.fields[0].message,
                code: error.fields[0].code
              });
            } else {
              res.send({
                error: "error in post: " + JSON.stringify(error)
              });
            }
            return;
          }
          res.send(JSON.stringify(result));
        });
      }
    })["delete"]({
      before: function(req, res, next) {
        repo["delete"](req.params.nodesId, req.params.nodesType, function(error, result) {
          if ((error != null)) {
            if (error.fields != null) {
              res.send({
                error: error.fields[0].message,
                code: error.fields[0].code
              });
            } else {
              res.send({
                error: "error in post: " + JSON.stringify(error)
              });
            }
            return;
          }
          res.send(JSON.stringify(result));
        });
      }
    }).index({
      before: function(req, res, next) {
        repo.index(req.params.nodesType, req.query, function(error, result) {
          if ((error != null)) {
            res.send({
              error: error.fields[0].message
            });
            return;
          }
          res.send(JSON.stringify(result));
        });
      }
    });
    return resource;
  };

}).call(this);

//# sourceMappingURL=nodes.js.map
