// Generated by CoffeeScript 1.10.0
(function() {
  var Neo4jRepostitory, QueryRoutes, Resource, async, config, mongoose, queryRoute, repo, repoConfig;

  mongoose = require('mongoose');

  Resource = require('resourcejs');

  async = require('async');

  config = require('../config/configuration');

  Neo4jRepostitory = require('../source/repositories/Neo4jRepository');

  repoConfig = {
    url: config.neo4jurl
  };

  repo = new Neo4jRepostitory(repoConfig);

  QueryRoutes = require('../source/queries/QueryRoutes');

  queryRoute = new QueryRoutes({});

  module.exports = function(app, model) {
    var resource;
    resource = Resource(app, '', 'Routes', model).get().post({
      before: function(req, res, next) {
        var i, len, makeQuery, queries, ref, sku;
        queries = [];
        makeQuery = function(to, sku) {
          return function(callback) {
            return queryRoute.query({
              to: to,
              sku: sku
            }, repo, function(error, result) {
              if (error == null) {
                result = {
                  sku: sku,
                  routes: result
                };
              }
              return callback(error, result);
            });
          };
        };
        ref = req.body.skus;
        for (i = 0, len = ref.length; i < len; i++) {
          sku = ref[i];
          queries.push(makeQuery(req.body.to, sku));
        }
        async.parallelLimit(queries, 10, function(error, result) {
          if ((error != null)) {
            return res.render('error', {
              error: {
                status: "Error finding and creating routes",
                stack: "In controllers/Routes"
              },
              message: ' Error is' + error.message
            });
          } else {
            req.body.routes = result;
            return next();
          }
        });
      }
    })["delete"]().index({
      before: function(req, res, next) {
        if ((req.query.query != null)) {
          req.modelQuery = this.model.find(JSON.parse(req.query.query));
          req.query.query = null;
        }
        next();
      }
    });
    return resource;
  };

}).call(this);

//# sourceMappingURL=routes.js.map
