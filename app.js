// Generated by CoffeeScript 1.10.0
(function() {
  var Edges, Nodes, Resources, Routes, app, bodyParser, config, cookieParser, cors, edge, express, favicon, haltOnTimedout, logger, mongoose, node, path, route, routes, swagger, timeout;

  express = require('express');

  path = require('path');

  cors = require('cors');

  favicon = require('serve-favicon');

  logger = require('morgan');

  cookieParser = require('cookie-parser');

  bodyParser = require('body-parser');

  routes = require('./paths/index');

  config = require('./config/configuration');

  app = express();

  app.set('views', path.join(__dirname, 'views'));

  app.set('view engine', 'jade');

  app.use(favicon(path.join(__dirname, 'public/images', 'favicon.ico')));

  app.use(cors());

  app.use(bodyParser.json());

  app.use(bodyParser.urlencoded({
    extended: false
  }));

  app.use(cookieParser());

  app.use(require('stylus').middleware(path.join(__dirname, 'public')));

  app.use(express["static"](path.join(__dirname, 'public')));

  app.use('/', routes);

  config = require('./config/configuration');

  mongoose = require('mongoose');

  mongoose.Promise = require('bluebird');

  mongoose.connect(config.db);

  route = require('./models/route');

  Routes = require('./controllers/routes')(app, route.model);

  edge = require('./models/edge');

  Edges = require('./controllers/edges')(app, edge.model);

  node = require('./models/node');

  Nodes = require('./controllers/nodes')(app, node.model);

  Resources = {
    Routes: Routes,
    Edges: Edges,
    Nodes: Nodes
  };

  swagger = require('./controllers/swagger');

  swagger(app, Resources, '/api', config);

  timeout = require('connect-timeout');

  app.use(timeout(config.timeout));

  haltOnTimedout = function(req, res, next) {
    if (!req.timedout) {
      return next();
    }
  };

  app.use(haltOnTimedout);

  if (app.get('env') === 'development' || app.get('env') === 'local') {
    app.use(function(err, req, res, next) {
      if ((err != null)) {
        res.status(err.status || 500);
        return res.render('error', {
          message: err.message,
          error: err
        });
      }
    });
  } else {
    app.use(function(err, req, res, next) {
      if ((err != null)) {
        res.status(err.status || 500);
        return res.render('error', {
          message: err.message,
          error: {}
        });
      }
    });
  }

  module.exports = app;

}).call(this);

//# sourceMappingURL=app.js.map
