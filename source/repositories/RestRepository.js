// Generated by CoffeeScript 1.10.0
(function() {
  var RestRepository, async, request;

  async = require('async');

  request = require('superagent');

  module.exports = RestRepository = (function() {
    function RestRepository(config) {
      this.config = config;
      this.buffer = null;
    }

    RestRepository.prototype.find = function(query, callback) {
      return request.get(this.config.url).query({
        query: query
      }).set('Accept', 'application/json').end(callback);
    };

    RestRepository.prototype.get = function(id, callback) {
      return request.get(this.config.url + "/" + id).set('Accept', 'application/json').end(callback);
    };

    RestRepository.prototype.add = function(json, callback) {
      var make;
      make = function(url, json) {
        return function(callback) {
          request.post(url).send(json).set('Accept', 'application/json').end(callback);
        };
      };
      if ((this.buffer != null) || (callback == null)) {
        this.buffer.push(make(this.config.url, json));
      } else {
        request.post(this.config.url).send(json).set('Accept', 'application/json').end(callback);
      }
    };

    RestRepository.prototype.set = function(id, json, callback) {
      var make, url;
      make = function(url, json) {
        return function(callback) {
          request.put(url).send(json).set('Accept', 'application/json').end(callback);
        };
      };
      if (id == null) {
        url = this.config.url;
      } else {
        url = this.config.url + "/" + id;
      }
      if ((this.buffer != null) || (callback == null)) {
        this.buffer.push(make(url, json));
      } else {
        request.put(url).send(json).set('Accept', 'application/json').end(callback);
      }
    };

    RestRepository.prototype["delete"] = function(id) {
      return request["delete"](this.config.url + "/" + id).send(json).set('Accept', 'application/json').end(callback);
    };

    RestRepository.prototype.pipeline = function() {
      return this.buffer = [];
    };

    RestRepository.prototype.exec = function(callback) {
      return async.parallelLimit(this.buffer, 10, (function(_this) {
        return function(error, results) {
          if ((error != null)) {
            console.log("Error:" + error);
          }
          return _this.buffer = null;
        };
      })(this));
    };

    return RestRepository;

  })();

}).call(this);

//# sourceMappingURL=RestRepository.js.map
