// Generated by CoffeeScript 1.10.0
(function() {
  var Query, iQuery,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  iQuery = require('./iQuery');

  Query = (function(superClass) {
    extend(Query, superClass);

    function Query(config) {
      this.config = config != null ? config : {};
    }

    Query.prototype.query = function(context, repo, callback) {
      var query;
      query = "MATCH (s:Product {id: '" + context.sku + "'}) -[b:BELONGS_TO]->(warehouse) -[:RESUPPLIES | SWEPT_TO *0..2]->() -[:FLOWS_THROUGH *0..1]->(leafnode) -[r:LAST_MILE]->(c:Zone) where toInt(b.inventory) > 1 and (r.zip='" + context.to + "' or r.zip='000') With warehouse, leafnode MATCH path=(warehouse) -[:RESUPPLIES | SWEPT_TO *0..2]->() -[:FLOWS_THROUGH *0..1]->(leafnode) With path, reduce(ccost=0, r IN relationships(path)| ccost+toInt(r.custCost)) AS totalCustCost,reduce(scost=0, r IN relationships(path)| scost+ toInt(r.sellerCost)) AS totalSellerCost, reduce(bcost=0, r IN relationships(path)| bcost+ toInt(r.bdCost)) AS totalBDCost ORDER BY totalCustCost,totalSellerCost,totalBDCost ASC return extract(n in nodes(path) | n.id) AS Warehouses,last(nodes(path)).postalCode AS LastMileFromZip,extract(rel in relationships(path) | type(rel)) as Relations, totalCustCost,totalSellerCost,totalBDCost";
      return repo.run(query, {}, (function(_this) {
        return function(error, result) {
          callback(error, result);
        };
      })(this));
    };

    return Query;

  })(iQuery);

  module.exports = Query;

}).call(this);

//# sourceMappingURL=QueryRoutes.js.map
